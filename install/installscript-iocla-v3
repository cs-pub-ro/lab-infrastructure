#!/bin/bash

STUDENT="student"
PRF="\e[32m[installscript.sh]\e[0m"

## external download links
SASM_LINK="http://download.opensuse.org/repositories/home:/Dman95/xUbuntu_18.04/amd64/sasm_3.10.1_amd64.deb"
BINARYNINJA_LINK="https://cdn.binary.ninja/installers/BinaryNinja-demo.zip"
IDAFREE_LINK="https://out7.hex-rays.com/files/idafree70_linux.run"

## packages to install
BLOAT_PKGS="xfburn thunderbird pidgin simple-scan transmission*"

## Working dir
TEMP=$(mktemp -d)

## TODO set this as signal handler for the usual suspects
function cleanup {
	rm -rf "$TEMP"
}

function remove_bloatware {
	sudo apt-get -y remove $BLOAT_PKGS
	sudo apt-get -y autoremove
}

function install_packages {
	./install-apt-packages iocla.packages
}

function install_sasm {
	if [[ ! -z $(dpkg -l sasm | grep ii 2>/dev/null) ]]; then
		echo -e "$PRF sasm is already installed"; return
	fi
	
	wget -O "$TEMP/sasm.deb" $SASM_LINK
	sudo dpkg -i "$TEMP/sasm.deb"
	rm "$TEMP/sasm.deb"
	# install missing dependencies
	sudo apt-get -f -y install
}

function install_binaryninja {
	if [[ ! -z $(ls /opt/binaryninja 2>/dev/null) ]]; then
		echo -e "$PRF binaryninja is already installed"; return
	fi

	wget $BINARYNINJA_LINK -O "$TEMP/binaryninja.zip"
	sudo unzip "$TEMP/binaryninja.zip" -d /opt/
	rm "$TEMP/binaryninja.zip"

	ln -s /opt/binaryninja/binaryninja /home/$STUDENT/bin/binaryninja
	sudo ln -s /opt/binaryninja/binaryninja /root/bin/binaryninja
	
	# get icon
	sudo wget https://binary.ninja/ico/apple-icon-180x180.png -O /opt/binaryninja/icon.png
	
	# inset entry in gnome shell
	sudo tee /usr/share/applications/BinaryNinja.desktop > /dev/null << END
[Desktop Entry]
Type=Application
Version=1
Name=Binary Ninja (demo)
Comment=Interactive Disassembler
Icon=/opt/binaryninja/icon.png
Exec=/opt/binaryninja/binaryninja
Categories=Reversing;
Terminal=false
END
}

function install_gdb_PEDA {
	if [[ ! -z $(ls /home/$STUDENT/peda 2>/dev/null) ]]; then
		echo -e "$PRF gdbPEDA is already installed"; return
	fi

	# setup for user student
	git clone https://github.com/longld/peda.git /home/$STUDENT/peda
	echo -ne "def peda\nsource ~/peda/peda.py\nend\n" > /home/$STUDENT/.gdbinit

	# same for root user. unsecure, but space efficient
	sudo ln -s /home/$STUDENT/peda /root/peda
	sudo ln -f /home/$STUDENT/.gdbinit /root/.gdbinit
}

function install_ida_free {
	if [[ ! -z $(ls /opt/idafree 2>/dev/null) ]]; then
		echo -e "$PRF ida FREE is already installed"; return
	fi

	wget $IDAFREE_LINK -O "$TEMP/ida.run"
	chmod +x "$TEMP/ida.run"
	
	echo -e "\n\n$PRF you have to install this manually. Please set the install path to: /opt/idafree"
	sleep 5

	sudo "$TEMP/ida.run" --mode unattended
	rm "$TEMP/ida.run"
	
	# insert entry in gnome shell
	sudo tee /usr/share/applications/IDAFree.desktop > /dev/null << END
[Desktop Entry]
Type=Application
Version=0.9.4
Name=IDA Free
Comment=Interactive Disassembler Free
Icon=/opt/idafree/appico64.png
Exec=/opt/idafree/ida64
Terminal=false
Categories=Reversing
END
}

function install_pwn_tools {
	if [[ ! -z $(python -c "from pwn import *; print 22" 2>/dev/null) ]]; then
		echo -e "$PRF PWNtools is already installed"; return
	fi

	sudo apt-get update
	sudo apt-get install -y python2.7 python-pip python-dev git libssl-dev libffi-dev build-essential -y
	# XXX maybe no sudo and just --user?
	sudo pip install --upgrade pip
	sudo pip install --upgrade pwntools
}

function disable_ASLR {
	if [[ ! -z $(cat /etc/sysctl.d/01-disable-aslr.conf 2>/dev/null) ]]; then
		echo -e "$PRF ASLR is already disabled"; return
	fi

	sudo tee /etc/sysctl.d/01-disable-aslr.conf > /dev/null <<< "kernel.randomize_va_space = 0"
}

function setup_boot_aliases {
	if [[ ! -z $(grep "boot-cli" /home/$STUDENT/.bash_aliases 2>/dev/null) ]]; then
		echo -e "$PRF aliases are already set"; return
	fi

	echo -ne \
	'alias boot-cli="systemctl set-default multi-user.target; echo 'Done! from now on, subsequent boots will enter into CLI mode'"\nalias boot-graphical="systemctl set-default graphical.target; echo 'Done! from now on, subsequent boots will enter into GUI mode'"\n' \
	>> /home/$STUDENT/.bash_aliases
	sudo ln -f /home/$STUDENT/.bash_aliases /root/
}

function disable_animations {
	gsettings set org.gnome.desktop.interface enable-animations false
}

function install_sysmonitor_dependencies {
	sudo apt-get -y install gir1.2-gtop-2.0 gir1.2-networkmanager-1.0
	if [ $? -ne 0 ]; then
		sudo apt-get -f -y install
		sudo apt-get -y install gir1.2-gtop-2.0 gir1.2-networkmanager-1.0
	fi
}

# if [[ -z $(grep "Ubuntu 18.04" /etc/lsb-release) ]]; then
# 	echo -e "$PRF Warning: this script was intended to be used on Ubuntu 18.04 LTS. Exiting."; exit
# fi

#####################
### install stuff ###

remove_bloatware

install_packages
install_sasm
install_binaryninja
install_gdb_PEDA
install_ida_free
install_pwn_tools
install_sysmonitor_dependencies

#####################
#### tweak stuff ####
disable_ASLR
setup_boot_aliases
disable_animations

#####################
###### cleanup ######
cleanup
